---
import PhoneInput from "@/components/ui/PhoneInput.astro";
import FormStatusModal from "@/components/ui/FormStatusModal.astro";
---

<script>
    import { openDialog, showDialogResult } from "@/lib/contact-form/dialogHandler.ts";
import { validateForm } from "@/lib/validation/validation.ts";

    // ---- Dialog Modal ----
    let isRequestResolved = false;

    // ---- Form submission ----
    const form: HTMLFormElement = document.getElementById("contact-form") as HTMLFormElement;
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;

    const sendData = async (formData: FormData): Promise<void> => {
        const abortController = new AbortController();

        const timeoutId: NodeJS.Timeout = openDialog(abortController, isRequestResolved);

        await fetch("/api/contact", {
            method: 'POST',
            body: formData,
            signal: abortController.signal
        })
        .then((response) => {
            isRequestResolved = true;
            clearTimeout(timeoutId)
            if (response.ok) {
                form.reset();

                // HACK: Update new value manually in the analytic card.
                const analyticCard: HTMLParagraphElement = document.getElementById("metric-forms-sent-amount") as HTMLParagraphElement;
                const newValue: number = parseInt(analyticCard.textContent ?? "0") + 1;
                analyticCard.textContent = newValue.toString();
            }
            showDialogResult(response.ok, response.ok ? "success" : "error");

        })
        .catch((error) => {
            if (!isRequestResolved)
                showDialogResult(false, error.name === "AbortError" ? "timeout" : "error")
        })
        .finally(() => clearTimeout(timeoutId));
    }

    form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(form);

        if (!validateForm(formData))
            return;

        submitButton.disabled = true;
        await sendData(formData);
        submitButton.disabled = false;
    });
</script>

<FormStatusModal/>
<form id="contact-form" novalidate>
    <h2>Contáctanos</h2>
            <div class="label-input-container">
                <label for="name">Nombres <span class="text-red-700">*</span></label>
                <div class="input-error-container">
                    <input type="text" id="name" name="name" placeholder="Nombres" autocomplete="name" required>
                    <p id="name-error" class="error"></p>
                </div>
            </div>

            <div class="label-input-container">
                <label for="email">Email<span class="text-red-700">*</span></label>
                <div class="input-error-container">
                    <input type="email" id="email" name="email" placeholder="email@email.com" autocomplete="email" required>
                    <p id="email-error" class="error"></p>
                </div>
            </div>

            <div class="label-input-container">
                <label for="phone-number">Teléfono<span class="text-red-700">*</span></label>
                <div class="input-error-container">
                    <PhoneInput/>
                    <p id="phone-code-error" class="error" hidden></p>
                    <p id="phone-number-error" class="error"></p>
                </div>
            </div>

            <div class="label-input-container">
                <label for="message">Mensaje</label>
                <div class="input-error-container"></div>
                    <textarea id="message" name="message" placeholder="Mensaje"></textarea>
                    <p id="message-error" class="error"></p>
                </div>
            </div>
            <button type="submit">Enviar</button>
</form>

<style>
    form {
        /* Layout */
        display: flex;
        width: 24.375rem;
        padding: 2.375rem 1.75rem;
        flex-direction: column;
        align-items: flex-start;
        gap: 0.9375rem;

        /* Style */
        border-radius: 0.25rem;
        border: 0.06rem solid #B3B3B3;
        background: #FFF;
        box-shadow: 0px 0px 10px -8px rgba(0, 0, 0, 0.25);
    }

    h2 {
        /* Typography */
        color: #004080;
        font-size: 2rem;
        font-style: normal;
        font-weight: 700;
        line-height: 120%;
        letter-spacing: -0.04rem;
    }

    button {
        /* Layout */
        height: 2.8125rem;
        min-height: 2.8125rem;
        width: 100%;
        padding: 0.75rem;
        gap: 0.5rem;

        /* Style */
        border-radius: 0.25rem;
        background:#004080;

        /* Typography */
        color: #FFF;
        font-size: 1rem;
        font-style: normal;
        font-weight: 400;
        line-height: 120%;
        letter-spacing: -0.02rem;

         /* Animations */
        transition: transform 0.2s ease-in-out, background-color 0.2s ease-in-out;
    }

    button:hover {
        /* Style */
        background: #134B83;
        transform: scale(1.02);
    }

    button:active {
        /* Style */
        background: #003366;
        transform: scale(0.95);

        /* Animations */
        animation: bounce-back 0.2s ease-out;
    }

    button:disabled {
        /* Style */
        border-radius: 0.25rem;
        background: #D9D9D9;

        /* Typography */
        color: #B3B3B3;
    }

    @keyframes bounce-back {
        50% {
            transform: scale(1.05);
        }
        100% {
            transform: scale(1);
        }
    }

    label {
        /* Typography */
        color: #1E1E1E;
        font-size: 1rem;
        font-style: normal;
        font-weight: 400;
        line-height: 120%;
        letter-spacing: -0.02rem;
    }

    input {
        /* Layout */
        padding: 0.75rem 0.75rem 0.75rem 1rem;

        /* Style */
        outline: none;
        border-radius: 0.25rem;
        border: 0.06rem solid #B3B3B3;
        background:#FFF;

        /* Typography */
        color: #1E1E1E;
        font-size: 1rem;
        font-style: normal;
        font-weight: 400;
        line-height: 120%;
        letter-spacing: -0.02rem;

        /* Animations */
        transition: transform 0.2s ease;
    }

    input:focus {
        /* Style */
        border-color: #004080;
        box-shadow: 0 0 8px rgba(0, 64, 128, 0.5);
        transform: scale(1.02);
    }

    input::placeholder {
        /* Typography */
        color: #B3B3B3;
        font-size: 1rem;
        font-style: normal;
        font-weight: 400;
        line-height: 120%;
        letter-spacing: -0.02rem;
    }

    textarea {
        /* Layout */
        padding: 0.75rem 0.75rem 0.75rem 1rem;
        min-height: 9.375rem;
        max-height: 20rem;

        /* Style */
        outline: none;
        border-radius: 0.25rem;
        border: 0.06rem solid #B3B3B3;
        background:#FFF;

        /* Typography */
        color: #1E1E1E;
        font-size: 1rem;
        font-style: normal;
        font-weight: 400;
        line-height: 120%;
        letter-spacing: -0.02rem;

        /* Animations */
        transition: transform 0.2s ease;
    }

    textarea:focus {
        /* Style */
        border-color: #004080;
        box-shadow: 0 0 8px rgba(0, 64, 128, 0.5);
        transform: scale(1.02);
    }

    textarea::placeholder {
        /* Typography */
        color: #B3B3B3;
        font-size: 1rem;
        font-style: normal;
        font-weight: 400;
        line-height: 120%;
        letter-spacing: -0.02rem;
    }

    .label-input-container {
        /* Layout */
        display: flex;
        padding: 0rem;
        flex-direction: column;
        gap: 0.5rem;
        align-self: stretch;
        width: 100%;
    }

    .input-error-container {
        /* Layout */
        display: flex;
        flex-direction: column;
        gap: 0rem;
    }

    .error {
        /* Layout */
        min-height: 1.5rem;

        /* Typography */
        color: #C00F0C;
        font-size: 0.875rem;
        font-style: normal;
        font-weight: 400;
        line-height: 120%;
        letter-spacing: -0.0175rem;

        /* Animation */
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

    .error.show {
        opacity: 1;
    }
</style>
