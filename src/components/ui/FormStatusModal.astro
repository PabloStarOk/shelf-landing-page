---
import CheckIcon from "@/icons/Check.astro";
import ErrorIcon from "@/icons/Error.astro";
---

<script>
const dialogModal: HTMLDialogElement = document.getElementById("dialog") as HTMLDialogElement;
const content: HTMLParagraphElement = document.getElementById("dialog-content") as HTMLParagraphElement;
const closeButton: HTMLButtonElement = document.getElementById("dialog-button") as HTMLButtonElement;
const checkIconWrapper = document.getElementById('check-icon-wrapper') as HTMLDivElement;
const errorIconWrapper = document.getElementById('error-icon-wrapper') as HTMLDivElement;
const loadingIcon = document.getElementById('loading-icon') as HTMLDivElement;
const checkIcon = document.getElementById('check-icon') as HTMLDivElement;
const errorIcon = document.getElementById('error-icon') as HTMLDivElement;

function onModalClose() {
    content.textContent = "";
    closeButton.disabled = true;
    document.body.style.overflow = 'visible';

    // Reset icons state
    checkIconWrapper.hidden = true;
    errorIconWrapper.hidden = true;
    loadingIcon.classList.remove('hide');
    loadingIcon.style.display = 'block';
    checkIcon.classList.remove('show');
    errorIcon.classList.remove('show');
}

closeButton.addEventListener("click", () => dialogModal.close())
dialogModal.addEventListener("close", onModalClose);

</script>

<dialog id="dialog">
    <div class="container">
        <div class="icon-container">
            <div id="loading-icon" class="loading-icon"></div>
            <div id="check-icon-wrapper" hidden>
                <CheckIcon/>
            </div>
            <div id="error-icon-wrapper" hidden>
                <ErrorIcon/>
            </div>
        </div>

        <p id="dialog-content"></p>

        <button id="dialog-button" disabled>Cerrar</button>
    </div>
</dialog>

<style>
    dialog {
        /* Layout */
        padding: 2rem 1.5rem;
        border-radius: 0.25rem;
        width: 100%;
        max-width: 30rem;
        min-height: 15rem;
        height: 40%;
        max-height: 20rem;
        flex-direction: column;

        /* Animation */
        animation: dialog-open 0.3s ease-out;
    }

    dialog::backdrop {
        /* Style */
        background-color: #000;
        opacity: 0.5;

        /* Animation */
        animation: fade-in 0.3s ease-out;
    }

    @keyframes dialog-open {
        from {
            opacity: 0;
            transform: scale(0.70);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    button {
        /* Layout */
        height: 2.8125rem;
        min-height: 2.8125rem;
        min-width: 6.25rem;
        width: 25%;
        padding: 0.75rem;
        gap: 0.5rem;

        /* Style */
        border-radius: 0.25rem;
        background:#004080;

        /* Typography */
        color: #FFF;
        font-size: 1rem;
        font-style: normal;
        font-weight: 400;
        line-height: 120%;
        letter-spacing: -0.02rem;

         /* Animations */
        transition: transform 0.2s ease-in-out, background-color 0.2s ease-in-out;
    }

    button:hover {
        /* Style */
        background: #134B83;
        transform: scale(1.02);
    }

    button:active {
        /* Style */
        background: #003366;
        transform: scale(0.95);

        /* Animations */
        animation: bounce-back 0.2s ease-out;
    }

    button:disabled {
        /* Style */
        border-radius: 0.25rem;
        background: #D9D9D9;

        /* Typography */
        color: #B3B3B3;
    }

    p {
        /* Layout */
        display: flex;
        flex-direction: column;
        justify-content: center;
        flex: 1 0 0;
        align-self: stretch;
        text-align: center;
        max-width: 100%;

        /* Typography */
        color: var(--Text-Default-Primary, #1E1E1E);
        text-align: center;
        font-family: var(--Fonts-Geometric-Sans-Serif, Poppins);
        font-size: var(--Body-Size-Base, 1rem);
        font-style: normal;
        font-weight: var(--Body-Font-Weight-Regular, 400);
        line-height: 120%; /* 1.2rem */
        letter-spacing: -0.02rem;
    }

    .container {
        /* Layout */
        display: flex;
        width: 100%;
        min-height: 16rem;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
    }

    .loadingIcon {
        width: 2rem;
        aspect-ratio: 1;
        --_g: no-repeat radial-gradient(farthest-side,#004080 94%,#0000);
        background:
            var(--_g) 0    0,
            var(--_g) 100% 0,
            var(--_g) 100% 100%,
            var(--_g) 0    100%;
        background-size: 40% 40%;
        animation: l38 0.5s infinite;
    }
    @keyframes l38 {
        100% {background-position: 100% 0,100% 100%,0 100%,0 0}
    }


    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }

    @keyframes checkmark {
        0% {
            transform: scale(0);
        }
        50% {
            transform: scale(1.2);
        }
        100% {
            transform: scale(1);
        }
    }

    .loading-icon {
        width: 3rem;
        aspect-ratio: 1;
        border-radius: 50%;
        animation: spin 1s linear infinite;

        /* Style */
        border: 0.5rem solid #D9D9D9;
        border-top: 0.5rem solid #004080;
    }

    .loading-icon.hide {
        opacity: 0;
        transition: opacity 0.3s ease-out;
    }
</style>
